django-cities - Place models and data for Django apps
=====================================================

This add-on provides models and commands to import country / region / city / district data into your database.
The data is pulled from GeoNames and contains localized names, codes, geo-coords, and population.

Your database must support spatial queries, see GeoDjango for setup.

For more information see: http://www.coderholic.com/django-cities-countries-regions-cities-and-districts-for-django/


Examples
=========
Finding all London boroughs:

>>> london = City.objects.filter(country__name='United Kingdom').get(name='London')
>>> boroughs = District.objects.filter(city=london)

Nearest city to a given geo-coord (longitude, latitude):

>>> City.objects.distance(Point(1, 51)).order_by('distance')[0]
<City: Dymchurch, Kent, United Kingdom>

5 Nearest cities to London:

>>> london = City.objects.filter(country__name='United Kingdom').get(name='London')
>>> nearest = City.objects.distance(london.location).exclude(id=london.id).order_by('distance')[:5]

Get all countries in Japanese preferring official names if available, fallback on ASCII names:

>>> [country.alt_names_ja.get_preferred(default=country.name) for country in Country.objects.all()]

Use alternate names model to get Vancouver in Japanese:

>>> geo_alt_names[City]['ja'].objects.get_preferred(geo__name='Vancouver', default='Vancouver')

Gather names of Tokyo from all LANGUAGES, including names from undetermined language data ('und'):

>>> [name for locale in settings.CITIES_LOCALES
        for name in geo_alt_names[City][locale].objects.filter(geo__name='Tokyo')]


Install
=========
- Run: python setup.py install
- Add/Merge the following into your settings.py:

INSTALLED_APPS = (
    'cities',
)

LOGGING = {
    'handlers': {
        'console':{
            'level':'DEBUG',
            'class':'logging.StreamHandler',
        },
    },
    'loggers': {
        'cities': {
            'handlers': ['console'],
            'level': 'INFO',
        }
    }
}

CITIES_LOCALES = ['und']
if 'LANGUAGES' in locals(): CITIES_LOCALES += [lang[0] for lang in LANGUAGES]


- Sync your database with the new models: 'manage.py syncdb'
- Populate or update your database by running: 'manage.py cities'


Notes
=========
The localized models / tables are created dynamically from CITIES_LOCALES.
Some datasets are very large (> 100 MB) and take time to download / import, and there's no progress display.
Data will only be downloaded / imported if it is newer than your data, and only matching rows will be overwritten.
The cities manage command has options, see --help.  Verbosity is controlled through LOGGING.